"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[740],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var i=n.createContext({}),o=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},c=function(e){var t=o(e.components);return n.createElement(i.Provider,{value:t},e.children)},l="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),l=o(a),d=s,u=l["".concat(i,".").concat(d)]||l[d]||h[d]||r;return a?n.createElement(u,p(p({ref:t},c),{},{components:a})):n.createElement(u,p({ref:t},c))}));function u(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,p=new Array(r);p[0]=d;var m={};for(var i in t)hasOwnProperty.call(t,i)&&(m[i]=t[i]);m.originalType=e,m[l]="string"==typeof e?e:s,p[1]=m;for(var o=2;o<r;o++)p[o]=a[o];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1817:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>h,frontMatter:()=>r,metadata:()=>m,toc:()=>o});var n=a(7462),s=(a(7294),a(3905));const r={title:"Split a secret",sidebar_position:2},p="Split a secret",m={unversionedId:"guides/split",id:"guides/split",title:"Split a secret",description:"Before you can split any secret, you have to configure a cyclic group to be used for Pedersen operations as is",source:"@site/docs/guides/02-split.mdx",sourceDirName:"guides",slug:"/guides/split",permalink:"/pedersen/guides/split",draft:!1,editUrl:"https://github.com/MatteoArella/pedersen/tree/master/docs/docs/guides/02-split.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Split a secret",sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Configure a cyclic group",permalink:"/pedersen/guides/group"},next:{title:"Combine a secret",permalink:"/pedersen/guides/combine"}},i={},o=[{value:"Secret shares structure",id:"secret-shares-structure",level:2},{value:"Abscissae vector",id:"abscissae-vector",level:3},{value:"Secret parts",id:"secret-parts",level:3},{value:"Secret commitments",id:"secret-commitments",level:3}],c={toc:o},l="wrapper";function h(e){let{components:t,...a}=e;return(0,s.kt)(l,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"split-a-secret"},"Split a secret"),(0,s.kt)("p",null,"Before you can split any secret, you have to configure a cyclic group to be used for Pedersen operations as is\nshown in ",(0,s.kt)("a",{parentName:"p",href:"group"},"Configure a cyclic group"),"."),(0,s.kt)("p",null,"This example shows how to split a secret with a ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(t, n)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),"-threshold scheme of ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"t"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"(")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(t, n) = (")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"(")))))," ",(0,s.kt)("inlineCode",{parentName:"p"},"schemeThreshold")," , ",(0,s.kt)("inlineCode",{parentName:"p"},"schemeParts")," ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},")")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go",metastring:"showLineNumbers",showLineNumbers:!0},'import (\n    "github.com/matteoarella/pedersen"\n)\n\ngroup := /* cyclic group */\nschemeParts := 5\nschemeThreshold := 3\n// highlight-next-line\nsecret := /* secret to split */\n\np, err := pedersen.NewPedersen(schemeParts, schemeThreshold, pedersen.CyclicGroup(group))\nif err != nil {\n    panic(err)\n}\n\n// highlight-start\nshares, err = p.Split(secret, nil)\nif err != nil {\n    panic(err)\n}\n// highlight-end\n\n/* ...\n   send shares parts to the corresponding shareholder and broadcast the commitments\n   ...\n*/\n')),(0,s.kt)("h2",{id:"secret-shares-structure"},"Secret shares structure"),(0,s.kt)("p",null,"When a secret is splitted with ",(0,s.kt)("inlineCode",{parentName:"p"},"pedersen.Split")," a ",(0,s.kt)("inlineCode",{parentName:"p"},"pedersen.Shares")," object is returned.\nThis object contains every information that the ",(0,s.kt)("em",{parentName:"p"},"dealer")," has to transfer to the ",(0,s.kt)("em",{parentName:"p"},"shareholders"),"."),(0,s.kt)("p",null,"If the secret that has to be split is not representable in the cyclic group (this is the case\nif the secret is bigger than the order of the cyclic group),\nthe secret is split into chunks, and each chunk is split into secret parts according\nto Pedersen verifiable secret sharing."),(0,s.kt)("h3",{id:"abscissae-vector"},"Abscissae vector"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Shares.Abscissae")," is the abscissae vector used for computing the ordinate values of\nthe secret parts.\nThere is one abscissa for each ",(0,s.kt)("em",{parentName:"p"},"shareholder"),", so if ",(0,s.kt)("inlineCode",{parentName:"p"},"shareholderIdx")," represents\nthe index of one ",(0,s.kt)("em",{parentName:"p"},"shareholder"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Abscissae[shareholderIdx]")," is the abscissa\nrelated to that ",(0,s.kt)("em",{parentName:"p"},"shareholder"),"."),(0,s.kt)("h3",{id:"secret-parts"},"Secret parts"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Shares.Parts")," is the matrix of secret parts."),(0,s.kt)("p",null,"The first index of ",(0,s.kt)("inlineCode",{parentName:"p"},"Shares.Parts")," represents the shareholder index, while the second index\nrepresents the chunk index (",(0,s.kt)("inlineCode",{parentName:"p"},"Parts[shareholderIdx][chunkIdx]"),")."),(0,s.kt)("h3",{id:"secret-commitments"},"Secret commitments"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Shares.Commitments")," is the matrix of commitments.\nThe first index of ",(0,s.kt)("inlineCode",{parentName:"p"},"Shares.Commitments")," represents the chunk index so ",(0,s.kt)("inlineCode",{parentName:"p"},"Commitments[chunkIdx]"),"\nis the vector of commitments related to the chunk with index ",(0,s.kt)("inlineCode",{parentName:"p"},"chunkIdx"),"."))}h.isMDXComponent=!0}}]);