"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[236],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>N});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=r.createContext({}),o=function(e){var a=r.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):m(m({},a),e)),t},c=function(e){var a=o(e.components);return r.createElement(i.Provider,{value:a},e.children)},l="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),l=o(t),d=n,N=l["".concat(i,".").concat(d)]||l[d]||h[d]||s;return t?r.createElement(N,m(m({ref:a},c),{},{components:t})):r.createElement(N,m({ref:a},c))}));function N(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,m=new Array(s);m[0]=d;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p[l]="string"==typeof e?e:n,m[1]=p;for(var o=2;o<s;o++)m[o]=t[o];return r.createElement.apply(null,m)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7186:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>m,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>o});var r=t(7462),n=(t(7294),t(3905));const s={title:"Verify secret shares",sidebar_position:4},m="Verify secret shares",p={unversionedId:"guides/verify",id:"guides/verify",title:"Verify secret shares",description:"With Pedersen verifiable secret sharing the sharing and the reconstruction of any secret can be verified.",source:"@site/docs/guides/04-verify.mdx",sourceDirName:"guides",slug:"/guides/verify",permalink:"/pedersen/guides/verify",draft:!1,editUrl:"https://github.com/MatteoArella/pedersen/tree/master/docs/docs/guides/04-verify.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Verify secret shares",sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Combine a secret",permalink:"/pedersen/guides/combine"},next:{title:"Acknowledgements",permalink:"/pedersen/acknowledgements"}},i={},o=[{value:"Shareholder verification",id:"shareholder-verification",level:2},{value:"Dealer verification",id:"dealer-verification",level:2}],c={toc:o},l="wrapper";function h(e){let{components:a,...t}=e;return(0,n.kt)(l,(0,r.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"verify-secret-shares"},"Verify secret shares"),(0,n.kt)("p",null,"With Pedersen verifiable secret sharing the sharing and the reconstruction of any secret can be verified."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"in the ",(0,n.kt)("em",{parentName:"p"},"sharing phase")," each ",(0,n.kt)("em",{parentName:"p"},"Shareholder")," can verify that the secret shares that he has\nreceived are valid")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"in the ",(0,n.kt)("em",{parentName:"p"},"reconstruction phase")," the ",(0,n.kt)("em",{parentName:"p"},"Dealer")," can verify that the secret shares received from the ",(0,n.kt)("em",{parentName:"p"},"shareholders"),"\nare valid."))),(0,n.kt)("p",null,"Before you can verify any secret shares, you have to configure a cyclic group to be used for Pedersen operations as is\nshown in ",(0,n.kt)("a",{parentName:"p",href:"group"},"Configure a cyclic group"),"."),(0,n.kt)("p",null,"In the following examples a ",(0,n.kt)("span",{parentName:"p",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,n.kt)("mi",{parentName:"mrow"},"t"),(0,n.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,n.kt)("mi",{parentName:"mrow"},"n"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(t, n)")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.kt)("span",{parentName:"span",className:"mopen"},"("),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,n.kt)("span",{parentName:"span",className:"mpunct"},","),(0,n.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,n.kt)("span",{parentName:"span",className:"mclose"},")"))))),"-threshold scheme of ",(0,n.kt)("span",{parentName:"p",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,n.kt)("mi",{parentName:"mrow"},"t"),(0,n.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,n.kt)("mi",{parentName:"mrow"},"n"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,n.kt)("mo",{parentName:"mrow"},"="),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},"(")),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(t, n) = (")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.kt)("span",{parentName:"span",className:"mopen"},"("),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,n.kt)("span",{parentName:"span",className:"mpunct"},","),(0,n.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,n.kt)("span",{parentName:"span",className:"mclose"},")"),(0,n.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,n.kt)("span",{parentName:"span",className:"mrel"},"="),(0,n.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.kt)("span",{parentName:"span",className:"mopen"},"(")))))," ",(0,n.kt)("inlineCode",{parentName:"p"},"schemeThreshold")," , ",(0,n.kt)("inlineCode",{parentName:"p"},"schemeParts")," ",(0,n.kt)("span",{parentName:"p",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},")")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.kt)("span",{parentName:"span",className:"mclose"},")")))))," is assumed."),(0,n.kt)("h2",{id:"shareholder-verification"},"Shareholder verification"),(0,n.kt)("p",null,"When a ",(0,n.kt)("em",{parentName:"p"},"shareholder")," privately receives a secret part and the corresponding broadcast secret commitments he can verify the part\nin the following way."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/matteoarella/pedersen"\n)\n\nschemeParts := 5\nschemeThreshold := 3\ngroup := /* cyclic group */\nx := /* abscissa related to the shareholder part */\nshare := /* secret share received from the dealer */\ncommitments := /* commitments broadcast from the dealer */\n\np, err := pedersen.NewPedersen(schemeParts, schemeThreshold, pedersen.CyclicGroup(group))\nif err != nil {\n    panic(err)\n}\n\nerr = p.Verify(x, share, commitments)\nif err != nil {\n    panic(err)\n}\n')),(0,n.kt)("h2",{id:"dealer-verification"},"Dealer verification"),(0,n.kt)("p",null,"When a ",(0,n.kt)("em",{parentName:"p"},"dealer")," receives a secret part from a ",(0,n.kt)("em",{parentName:"p"},"shareholder")," he can verify the part\nin the same way as shown in ",(0,n.kt)("a",{parentName:"p",href:"verify#shareholder-verification"},"Shareholder verification"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/matteoarella/pedersen"\n)\n\nschemeParts := 5\nschemeThreshold := 3\ngroup := /* cyclic group */\nx := /* abscissa related to the shareholder part */\nshare := /* secret share received from the dealer */\ncommitments := /* commitments broadcast from the dealer */\n\np, err := pedersen.NewPedersen(schemeParts, schemeThreshold, pedersen.CyclicGroup(group))\nif err != nil {\n    panic(err)\n}\n\nerr = p.Verify(x, share, commitments)\nif err != nil {\n    panic(err)\n}\n')),(0,n.kt)("p",null,"Additionally, the ",(0,n.kt)("em",{parentName:"p"},"dealer")," can also collect every secret shares and then verify all of them in a\nsingle step as is shown here:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/matteoarella/pedersen"\n)\n\nschemeParts := 5\nschemeThreshold := 3\ngroup := /* cyclic group */\nshares := /* secret shares assembled from every secret parts */\n\np, err := pedersen.NewPedersen(schemeParts, schemeThreshold, pedersen.CyclicGroup(group))\nif err != nil {\n    panic(err)\n}\n\nerr = p.VerifyShares(shares)\nif err != nil {\n    panic(err)\n}\n')))}h.isMDXComponent=!0}}]);